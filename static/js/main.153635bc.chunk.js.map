{"version":3,"sources":["slides/Examples.tsx","slides/Framworks.tsx","slides/Hello.tsx","slides/PracticalExample.tsx","slides/PutAPixelOnTheScreen.tsx","slides/WhatIsGenerativeArt.tsx","slides/WhoAmI.tsx","slides/WhyGenerativeArt.tsx","lib/colors.ts","lib/math.ts","lib/helpers.ts","lib/noise.ts","lib/shapes.ts","viz/NoiseNumberViz.tsx","slides/NoiseFunction.tsx","viz/NoiseLineViz.tsx","slides/NoiseLineFunction.tsx","slides/WhatWeWillBuild.tsx","viz/FlowFieldViz.tsx","slides/FlowField.tsx","viz/ForcesViz.tsx","viz/ForcesColorViz.tsx","slides/Forces.tsx","slides/ForcesColors.tsx","slides/Variations.tsx","slides/ClosingNotes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Examples","backgroundColor","className","tagName","alwaysVisible","values","value","i","src","alt","height","Frameworks","Hello","PracticalExample","PutAPixelOnTheScreen","WhatIsGenerativeArt","language","showLineNumbers","WhoAmI","WhyGenerativeArt","PaletteName","distance","x1","y1","x2","y2","x","Math","abs","y","sqrt","isBetween","a","b","c","map","randomInt","min","max","round","random","randomFloat","randomHue","saturation","lightness","alpha","SPRING","background","colors","NOIR","WINTER","AUTUMN","BLANC","ANNA","MOUNTAIN_FOREST","SEASIDE","RANDOM","Array","fill","hsla","hue","CanvasGlobalCompositionOperation","fromPalette","palette","length","Noise","width","centerX","centerY","distanceX","distanceY","atan2","PI","frequency","seed","noise","makeNoise2D","createShape","radius","points","shape","angle","push","cos","sin","isInsideRectangle","isInsideAnyParticle","particle","list","linePadding","match","buildQuadMap","divisionCount","getQuadrantIndex","maxX","maxY","quadCount","pX","floor","NoiseNumberViz","props","canvas","useRef","useEffect","current","context","getContext","fillStyle","fillRect","font","n","lib","simplex","rounded","leftPadded","padStart","fillText","ref","NoiseFunction","useState","setSeed","onClick","NoiseLineViz","strokeStyle","lineWidth","lineCap","smoothness","beginPath","arc","stroke","moveTo","lineTo","turbulence","NoiseLineFunction","setSmoothness","turbulance","setTurbulance","highlightRanges","toFixed","toPrecision","type","step","onChange","e","parseInt","target","parseFloat","WhatWeWillBuild","style","marginRight","verticalAlign","positions","FlowFieldViz","lineCount","showAnchors","stepSize","FlowField","setLineCount","setStepSize","setLineWidth","setShowAnchors","checked","ColorMethod","ForcesViz","quads","line","quad","enableCollisionDetection","cirlce","Forces","setEnableCollisionDetection","ForcesColorViz","regions","regionColors","colorMethod","FROM_PALETTE","BY_REGION","region","findIndex","robustPointInPolygon","quadIndex","index","ForcesColor","white","autumn","night","day","setColors","setColorMethod","join","slice","Variations","ClosingNotes","App","theme","primary","secondary","fontSizes","header","paragraph","transition","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.153635bc.chunk.js","sourcesContent":["import { Slide, Stepper } from 'spectacle';\nimport './slides.css';\n\nexport function Examples() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center\">\n        <Stepper\n          tagName=\"a\"\n          alwaysVisible={true}\n          values={[\n            'https://i.imgur.com/uLuvtCy.jpg',\n            'https://i.imgur.com/L6AoJY1.jpg',\n            'https://i.imgur.com/ALCfhL0.png',\n            'https://i.imgur.com/AmbyOEk.jpg',\n            'https://i.imgur.com/tLBq5l6.jpg',\n            'https://i.imgur.com/c65xCfB.jpg',\n            'https://i.imgur.com/LffdeTN.jpg',\n            'https://i.imgur.com/12YLldt.jpg',\n            'https://i.imgur.com/Gm395iL.png',\n          ]}\n        >\n          {(value, i) =>\n            i === -1 ? (\n              <h1>Examples</h1>\n            ) : (\n              <img src={value as string} alt=\"\" height=\"700px\" />\n            )\n          }\n        </Stepper>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide, UnorderedList, ListItem } from 'spectacle';\n\nexport function Frameworks() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <h2>Frameworks</h2>\n      <UnorderedList>\n        <ListItem>Processing</ListItem>\n        <ListItem>P5.js</ListItem>\n        <ListItem>TouchDesigner</ListItem>\n        <ListItem className=\"highlight\">\n          &gt; Typescript &amp; Canvas API\n        </ListItem>\n      </UnorderedList>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\nimport './slides.css';\n\nexport function Hello() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center mid\">\n        <h1>Generative Art</h1>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\nimport './slides.css';\n\nexport function PracticalExample() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center mid stack\">\n        <h1>A Practical Example</h1>\n        <h4>Code ahead</h4>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\n\nexport function PutAPixelOnTheScreen() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <h1 className=\"center mid\">Pixel ⮕ Screen</h1>\n    </Slide>\n  );\n}\n","import { Slide, CodePane } from 'spectacle';\n\nexport function WhatIsGenerativeArt() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center stack\">\n        <h2>What is generative art</h2>\n        <div className=\"center column\">\n          <CodePane language=\"typescript\" showLineNumbers={false}>\n            {`\n          const x = randomInt(0, canvas.width);\n          const y = randomInt(0, canvas.height);\n\n          canvas.fillRect(x, y, 100, 100);\n          `}\n          </CodePane>\n          <h2>\n            <span className=\"highlight\">=</span> ART.\n          </h2>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide, ListItem, UnorderedList } from 'spectacle';\n\nexport function WhoAmI() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <h2>Who am I?</h2>\n      <UnorderedList>\n        <ListItem className=\"highlight\">Damoon Rashidi</ListItem>\n        <ListItem>Lead Developer @ Freespee</ListItem>\n        <ListItem>Generative Artist</ListItem>\n        <ListItem>All around fun guy</ListItem>\n      </UnorderedList>\n    </Slide>\n  );\n}\n","import { Slide, ListItem, UnorderedList } from 'spectacle';\n\nexport function WhyGenerativeArt() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <h2>Why Generative Art?</h2>\n      <UnorderedList>\n        <ListItem>Creative</ListItem>\n        <ListItem>New problem domains</ListItem>\n        <ListItem>Exploratory</ListItem>\n        <ListItem>Endless variations</ListItem>\n      </UnorderedList>\n    </Slide>\n  );\n}\n","import { randomInt } from './math';\n\nexport type HSLA = [number, number, number, number?];\n\nexport interface Palette {\n  background: HSLA;\n  colors: HSLA[];\n}\n\nexport enum PaletteName {\n  SPRING,\n  WINTER,\n  AUTUMN,\n  BLANC,\n  ANNA,\n  MOUNTAIN_FOREST,\n  SEASIDE,\n  RANDOM,\n  NOIR,\n}\n\nexport const randomHue = (\n  [min, max]: [number, number],\n  saturation: number = 70,\n  lightness: number = 60,\n  alpha = 1\n): HSLA => [randomInt(min, max), saturation, lightness, alpha];\n\nexport const Palettes: Record<PaletteName, Palette> = {\n  [PaletteName.SPRING]: {\n    background: [65, 45, 90],\n    colors: [\n      [190, 60, 98],\n      [192, 63, 94],\n      [169, 46, 86],\n      [166, 45, 72],\n      [160, 43, 58],\n    ],\n  },\n  [PaletteName.NOIR]: {\n    background: [0, 0, 0],\n    colors: [[0, 0, 10]],\n  },\n  [PaletteName.WINTER]: {\n    background: [65, 45, 90],\n    colors: [\n      [201, 52, 77],\n      [204, 71, 41],\n      [92, 57, 71],\n      [116, 57, 40],\n      [1, 92, 79],\n    ],\n  },\n  [PaletteName.AUTUMN]: {\n    background: [48, 20, 9],\n    colors: [\n      [0, 100, 98],\n      [75, 100, 81],\n      [34, 61, 91],\n      [28, 82, 56],\n      [0, 8, 21],\n      [0, 44, 44],\n    ],\n  },\n  [PaletteName.BLANC]: {\n    background: [65, 30, 90],\n    colors: [\n      [0, 100, 100],\n      [0, 82, 75],\n      [193, 27, 76],\n      [192, 100, 94],\n      [44, 100, 94],\n    ],\n  },\n  [PaletteName.ANNA]: {\n    background: [17, 90, 90],\n    colors: [\n      [270, 70, 74],\n      [250, 80, 50],\n      [300, 70, 86],\n      [330, 31 + 50, 96],\n      [210, 9 + 50, 69],\n    ],\n  },\n  [PaletteName.MOUNTAIN_FOREST]: {\n    background: [180, 2, 88],\n    colors: [\n      [0, 100, 100],\n      [44, 100, 94],\n      [192, 100, 94],\n      [193, 27, 76],\n      [0, 8, 21],\n      [0, 44, 44],\n    ],\n  },\n  [PaletteName.SEASIDE]: {\n    background: [120, 25, 5],\n    colors: [\n      [40, 52, 88],\n      [48, 24, 46],\n      [0, 2, 38],\n      [214, 29, 41],\n    ],\n  },\n  [PaletteName.RANDOM]: {\n    background: randomHue([0, 360], 60, 95),\n    colors: Array(6)\n      .fill(null)\n      .map(() => randomHue([0, 360], 50, randomInt(0, 100))),\n  },\n};\n\nexport function hsla([hue, saturation, lightness, alpha]: HSLA): string {\n  if (alpha) {\n    return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;\n  }\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n}\n","import { Vector2D } from './';\n\nexport const isSameVector = ([x1, y1]: Vector2D, [x2, y2]: Vector2D): boolean =>\n  x1 === x2 && y1 === y2;\n\nexport const distance = ([x1, y1]: Vector2D, [x2, y2]: Vector2D): number => {\n  const x = Math.abs(x1 - x2);\n  const y = Math.abs(y1 - y2);\n\n  return Math.sqrt(x ** 2 + y ** 2);\n};\n\nexport const fib = (n: number): number => (n < 2 ? n : fib(n - 1) + fib(n - 2));\n\nexport const isBetween = (a: number, b: number, c: number): boolean =>\n  a >= b && a <= c;\n\nexport const average = (a: number, b: number) => (a + b) / 2;\n\nexport const map = (\n  value: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n): number => ((value - x1) * (y2 - x2)) / (y1 - x1) + x2;\n\nexport const clamp = (value: number, min: number, max: number): number =>\n  Math.min(max, Math.max(min, value));\n\nexport function randomInt(min: number = 0, max: number = 100) {\n  return Math.round(Math.random() * (max - min) + min);\n}\n\nexport function randomFloat(min: number = 0, max: number = 1) {\n  return Math.random() * (max - min) + min;\n}\n","import { randomInt, randomFloat, map } from './';\n\nexport const fromPalette = <T>(palette: T[]): T => {\n  const i = randomInt(0, palette.length - 1);\n  return palette[i];\n};\n\nexport const biasedFromPalette = <T>(palette: T[]): T => {\n  const a = randomFloat();\n  const b = randomFloat();\n  const n = Math.max(0, b - a);\n  const i = map(n, 0, 1, 0, palette.length);\n\n  return palette[Math.floor(i)];\n};\n\nexport const skip = (callback: Function): { do: Function } => ({\n  do: callback,\n});\n\nexport enum CanvasGlobalCompositionOperation {\n  SOURCE_IN = 'source-in',\n  SOURCE_OUT = 'source-out',\n  SOURCE_ATOP = 'source-atop',\n  DESTINATION_OVER = 'destination-over',\n  DESTINATION_IN = 'destination-in',\n  DESTINATION_OUT = 'destination-out',\n  DESTINATION_ATOP = 'destination-atop',\n  LIGHTER = 'lighter',\n  COPY = 'COPY',\n  XOR = 'xor',\n  MULTIPLY = 'multiply',\n  SCREEN = 'screen',\n  OVERLAY = 'overlay',\n  DARKEN = 'darken',\n  LIGHTEN = 'lighten',\n  COLOR_DODGE = 'color-dodge',\n  COLOR_BURN = 'color-burn',\n  HARD_LIGHT = 'hard-light',\n  SOFT_LIGHT = 'soft-light',\n  DIFFERENCE = 'difference',\n  EXCLUSION = 'exclusion',\n  HUE = 'hue',\n  SATURATION = 'saturation',\n  COLOR = 'color',\n  LUMINOSITY = 'luminosity',\n}\n\nexport function paintGrid(\n  ctx: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  { showNumbers }: { showNumbers: boolean }\n): void {\n  const stepsX = width / 10;\n  const stepsY = height / 20;\n  ctx.font = `20px sans-serif`;\n\n  for (let y = 0; y < height; y += stepsY) {\n    ctx.beginPath();\n    ctx.moveTo(0, y);\n    ctx.lineTo(width, y);\n    ctx.strokeStyle = '#ddd';\n    ctx.stroke();\n    ctx.closePath();\n\n    for (let x = 0; x < width; x += stepsX) {\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.strokeStyle = '#ddd';\n      ctx.stroke();\n      ctx.closePath();\n\n      if (showNumbers) {\n        ctx.fillStyle = '#f00';\n        ctx.fillText(`${Math.round(x)} : ${Math.round(y)}`, x, y);\n      }\n    }\n  }\n}\n\nexport function init(\n  width: number,\n  height: number,\n  clear = true,\n  id = 'canvas'\n): CanvasRenderingContext2D {\n  if (clear) {\n    document.body.innerHTML = '';\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.setAttribute('id', id);\n  canvas.width = width;\n  canvas.height = height;\n  document.body.appendChild(canvas);\n  let ctx = canvas.getContext('2d')!;\n  ctx.imageSmoothingEnabled = true;\n  return ctx;\n}\n","import { makeNoise2D } from 'open-simplex-noise';\nimport { map } from './';\n\nexport class Noise {\n  static swirl(x: number, y: number, width: number, height: number): number {\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const distanceX = Math.abs(centerX - x);\n    const distanceY = Math.abs(centerY - y);\n    const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n\n    return distance;\n  }\n\n  static toCenter(x: number, y: number, width: number, height: number): number {\n    const centerX = width / 2;\n    const centerY = height / 2;\n\n    const angle = Math.atan2(Math.abs(x - centerX), Math.abs(y - centerY));\n\n    return angle * Math.PI;\n  }\n\n  static rain(x: number, y: number, frequency: number): number {\n    const diff = (x % frequency) + y;\n    return map(diff, 0, frequency, -1, 1);\n  }\n\n  static simplex(x: number, y: number, seed: number = 100) {\n    const noise = makeNoise2D(seed);\n    return noise(x, y);\n  }\n}\n","import { isBetween, distance, randomFloat } from './';\nimport robustPointInPolygon from 'robust-point-in-polygon';\n\nexport type Vector2D = [number, number];\n\nexport type Shape = Vector2D[];\n\nexport interface Circle {\n  centerX: number;\n  centerY: number;\n  radius: number;\n}\n\nexport interface Line {\n  point1: Vector2D;\n  point2: Vector2D;\n  width: number;\n}\n\nexport interface LineConfiguration {\n  color: string;\n  lineWidth: number;\n}\n\nexport type ParticleMap = Circle[][];\n\nexport function drawShape(\n  ctx: CanvasRenderingContext2D,\n  config: {\n    shape: Shape;\n    color?: string | CanvasGradient;\n    lineConfiguration?: LineConfiguration;\n  }\n) {\n  ctx.beginPath();\n  ctx.moveTo(...config.shape[0]);\n  config.shape.forEach(point => ctx.lineTo(...point));\n  ctx.closePath();\n  if (config.lineConfiguration) {\n    ctx.lineWidth = config.lineConfiguration.lineWidth;\n    ctx.strokeStyle = config.lineConfiguration?.color;\n    ctx.stroke();\n  }\n  if (config.color) {\n    ctx.fillStyle = config?.color ?? 'black';\n    ctx.fill('nonzero');\n  }\n}\n\nexport function debugShape(ctx: CanvasRenderingContext2D, shape: Shape): void {\n  ctx.beginPath();\n  ctx.moveTo(...shape[0]);\n  shape.forEach(point => {\n    ctx.lineTo(...point);\n  });\n  ctx.closePath();\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = '#f00';\n  ctx.stroke();\n  ctx.font = '30px Arial';\n  shape.forEach((point, i) => {\n    ctx.fillStyle = '#fff';\n    ctx.beginPath();\n    ctx.arc(point[0], point[1], 15, 0, Math.PI * 2);\n    ctx.closePath();\n    ctx.fill();\n    ctx.fillStyle = '#000';\n    ctx.fillText(`${i}`, point[0] - 10, point[1] + 10);\n  });\n}\n\n// A function that creates N points around a 2d vector\nexport function createShape(\n  [x, y]: Vector2D,\n  radius: number,\n  points: number\n): Shape {\n  const shape: Shape = [];\n  for (let i = 0; i < points; i++) {\n    const angle = (i / points) * Math.PI * 2;\n    shape.push([x + Math.cos(angle) * radius, y + Math.sin(angle) * radius]);\n  }\n  return shape;\n}\n\nexport function middle([x1, y1]: number[], [x2, y2]: number[]): number[] {\n  return [(x1 + x2) / 2, (y1 + y2) / 2];\n}\n\nexport function getBoundingBox(shape: Shape): [number, number, number, number] {\n  return shape.reduce(\n    ([minX, minY, maxX, maxY], [x, y]) => [\n      Math.min(minX, x),\n      Math.min(minY, y),\n      Math.max(maxX, x),\n      Math.max(maxY, y),\n    ],\n    [shape[0][0], shape[0][1], shape[0][0], shape[0][1]]\n  );\n}\n\nexport function drawBoundingBox(\n  ctx: CanvasRenderingContext2D,\n  box: [number, number, number, number]\n): void {\n  ctx.strokeStyle = '#000';\n  ctx.rect(box[0], box[1], box[2] - box[0], box[3] - box[1]);\n  ctx.stroke();\n}\n\nexport function pointAlong(\n  [x1, y1]: Vector2D,\n  [x2, y2]: Vector2D,\n  percentage: number = 0.5\n): Vector2D {\n  return [x1 + (x2 - x1) * percentage, y1 + (y2 - y1) * percentage];\n}\n\nexport function angleBetweenPoints(\n  [x1, y1]: Vector2D,\n  [x2, y2]: Vector2D\n): number {\n  return Math.atan2(y2 - y1, x2 - x1);\n}\n\nexport function distort(\n  points: Vector2D[],\n  jitter = 5,\n  iterations = 5\n): Vector2D[] {\n  let newPoints: Vector2D[] = [];\n\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i];\n    const next = points[i + 1] ?? points[0];\n\n    let [x, y] = pointAlong(point, next, randomFloat(0.1, 0.9));\n\n    const angle = angleBetweenPoints(point, next) * Math.PI;\n\n    x += Math.cos(angle) * jitter * randomFloat(-10, 10);\n    y += Math.sin(angle) * jitter * randomFloat(-10, 10);\n\n    newPoints.push(point);\n    newPoints.push([x, y]);\n  }\n\n  return iterations >= 0\n    ? distort(newPoints, jitter, iterations - 1)\n    : newPoints;\n}\n\nexport const randomPointInCircle = (circle: Circle): Vector2D => {\n  const angle = randomFloat(0, Math.PI * 2);\n  const radius = randomFloat(0, circle.radius);\n  return [\n    circle.centerX + Math.cos(angle) * radius,\n    circle.centerY + Math.sin(angle) * radius,\n  ];\n};\n\nexport const isInsideCircle = (\n  [x, y]: Vector2D,\n  { centerX, centerY, radius }: Circle\n) => (x - centerX) ** 2 + (y - centerY) ** 2 <= radius ** 2;\n\nexport const isInsideRectangle = (\n  [x, y]: Vector2D,\n  [x1, y1, x2, y2]: [number, number, number, number]\n): boolean => isBetween(x, x1, x2) && isBetween(y, y1, y2);\n\nexport function isInsideAnyParticle(\n  particle: Circle,\n  list: Circle[],\n  linePadding: number\n): boolean {\n  for (let i = 0; i < list.length; i++) {\n    const match = list[i];\n    if (!match) {\n      return false;\n    }\n\n    const collides =\n      distance(\n        [particle.centerX, particle.centerY],\n        [match.centerX, match.centerY]\n      ) <\n      match.radius / 2 + particle.radius / 2 + linePadding;\n\n    if (collides) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function isInsidePolygon([x, y]: Vector2D, shape: Shape): boolean {\n  return robustPointInPolygon(shape, [x, y]) === -1;\n}\n\nexport function buildQuadMap(divisionCount: number): ParticleMap {\n  return new Array(divisionCount ** 2).fill([]);\n}\n\nexport function getQuadrantIndex(\n  [x, y]: Vector2D,\n  maxX: number,\n  maxY: number,\n  quadCount: number\n): number {\n  const pX = Math.floor((x / maxX) * quadCount);\n  const pY = Math.floor((y / maxY) * quadCount);\n  return pY * quadCount + pX - 1;\n}\n\nexport function nearestNeighbors(\n  [x, y]: Vector2D,\n  list: Vector2D[],\n  n: number,\n  maxDistance: number = Infinity\n) {\n  const neighbors: Vector2D[] = [];\n  for (let i = 0; i < list.length; i++) {\n    const [x2, y2] = list[i];\n    if (distance([x, y], [x2, y2]) < maxDistance) {\n      neighbors.push([x2, y2]);\n    }\n  }\n  return neighbors\n    .sort((a, b) => distance(a, [x, y]) - distance(b, [x, y]))\n    .slice(0, n);\n}\n","import { useRef, useEffect } from 'react';\nimport * as lib from '../lib';\nimport './viz.css';\n\nexport function NoiseNumberViz(props: { seed: number }) {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvas.current) {\n      return;\n    }\n\n    const [width, height] = [800, 800];\n\n    const context = canvas.current.getContext('2d')!;\n\n    context.fillStyle = '#eee';\n    context.fillRect(0, 0, width, height);\n\n    context.fillStyle = '#000';\n    context.font = '700 30px Source Code Pro';\n\n    for (let x = 0; x < width - 100; x += width / 8) {\n      for (let y = 0; y < height - 100; y += height / 8) {\n        const n = lib.Noise.simplex(x / 800, y / 800, props.seed);\n\n        const rounded = Math.floor(n * 100) / 100;\n\n        const leftPadded = `${rounded}`.padStart(2, ' ');\n\n        context.fillText(`${leftPadded}`, x + 50, y + 100);\n      }\n    }\n  });\n\n  return <canvas ref={canvas} width=\"800px\" height=\"800px\"></canvas>;\n}\n","import { useState } from 'react';\nimport { CodePane, Slide } from 'spectacle';\nimport { NoiseNumberViz } from '../viz/NoiseNumberViz';\nimport './slides.css';\n\nexport function NoiseFunction() {\n  const [seed, setSeed] = useState(0);\n\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center stack\">\n        <h3>Noise Functions</h3>\n        <div className=\"center column\">\n          <div className=\"stack\">\n            <CodePane language=\"typescript\" showLineNumbers={false}>\n              {`\n            const seed = random();\n            const n = noise(x, y, seed)\n            `}\n            </CodePane>\n          </div>\n          <div className=\"center stack\">\n            <NoiseNumberViz seed={seed}></NoiseNumberViz>\n            <div className=\"center stack form\">\n              <div>\n                <button\n                  onClick={() => setSeed(Math.floor(Math.random() * 100))}\n                >\n                  New Seed\n                </button>\n                <span className=\"highlight\">Seed: {seed}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { useRef, useEffect } from 'react';\nimport * as lib from '../lib';\nimport './viz.css';\n\ninterface Prop {\n  seed: number;\n  smoothness: number;\n  turbulence: number;\n}\n\nexport function NoiseLineViz(props: Prop) {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvas.current) {\n      return;\n    }\n\n    const [width, height] = [1600, 1600];\n\n    const context = canvas.current.getContext('2d')!;\n\n    context.fillStyle = '#eee';\n    context.fillRect(0, 0, width, height);\n\n    context.strokeStyle = '#000';\n    context.lineWidth = 8;\n    context.lineCap = 'round';\n\n    for (let x = 100; x < width - 100; x += width / 20) {\n      for (let y = 100; y < height - 100; y += height / 20) {\n        const n = lib.Noise.simplex(\n          x / props.smoothness,\n          y / props.smoothness,\n          props.seed\n        );\n\n        context.beginPath();\n        context.arc(x, y, 5, 0, 2 * Math.PI);\n        context.stroke();\n\n        context.beginPath();\n        context.moveTo(x, y);\n        context.lineTo(\n          x + Math.cos(n * props.turbulence) * 50,\n          y + Math.sin(n * props.turbulence) * 50\n        );\n        context.stroke();\n      }\n    }\n  });\n\n  return <canvas ref={canvas} width=\"1600px\" height=\"1600px\"></canvas>;\n}\n","import { useState } from 'react';\nimport { CodePane, Slide } from 'spectacle';\nimport { NoiseLineViz } from '../viz/NoiseLineViz';\nimport * as lib from '../lib';\nimport './slides.css';\n\nexport function NoiseLineFunction() {\n  const [seed, setSeed] = useState(0);\n  const [smoothness, setSmoothness] = useState(1);\n  const [turbulance, setTurbulance] = useState(1);\n\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center column mid\">\n        <CodePane\n          language=\"typescript\"\n          showLineNumbers={false}\n          highlightRanges={[[1, 2], 3, [13, 19], [5, 11], 3]}\n        >\n          {`\n            for (let x = 0; x < width; x += width / 20) {\n              for (let y = 0; y < height; y += height / 20) {\n                const n = noise(x${\n                  smoothness === 1 ? '' : ' / ' + smoothness\n                }, y${smoothness === 1 ? '' : ' / ' + smoothness}, ${seed});\n\n                /**\n                 * For the two points \n                 * [120, 190] and [125, 195]\n                 * Distance: ${lib\n                   .distance(\n                     [120 / smoothness, 190 / smoothness],\n                     [125 / smoothness, 195 / smoothness]\n                   )\n                   .toFixed(4)} points\n                 *\n                 * noise(${(120 / smoothness).toPrecision(4)}, ${(\n            190 / smoothness\n          ).toPrecision(4)}) = ${lib.Noise.simplex(\n            120 / smoothness,\n            190 / smoothness,\n            seed\n          ).toPrecision(4)}\n                 * noise(${(125 / smoothness).toPrecision(4)}, ${(\n            195 / smoothness\n          ).toPrecision(4)}) = ${lib.Noise.simplex(\n            125 / smoothness,\n            195 / smoothness,\n            seed\n          ).toPrecision(4)}\n                 **/\n\n                context.beginPath();\n                context.moveTo(x, y);\n                context.lineTo(\n                  x + Math.cos(n${\n                    turbulance === 1 ? '' : ' * ' + turbulance\n                  }) * lineLength,\n                  y + Math.sin(n${\n                    turbulance === 1 ? '' : ' * ' + turbulance\n                  }) * lineLength\n                );\n                context.stroke();\n              }\n            }\n            `}\n        </CodePane>\n        <div className=\"center stack\">\n          <NoiseLineViz\n            seed={seed}\n            smoothness={smoothness}\n            turbulence={turbulance}\n          ></NoiseLineViz>\n          <div className=\"center stack form\">\n            <div>\n              <button onClick={() => setSeed(Math.floor(Math.random() * 100))}>\n                New Seed\n              </button>\n              <span className=\"highlight\">Seed: {seed}</span>\n            </div>\n            <div>\n              <span>Smoothness</span>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"1000\"\n                step=\"1\"\n                value={smoothness}\n                onChange={(e) => setSmoothness(parseInt(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Turbulence</span>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"6\"\n                step=\"0.2\"\n                value={turbulance}\n                onChange={(e) => setTurbulance(parseFloat(e.target.value))}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\nimport './slides.css';\n\nexport function WhatWeWillBuild() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center\">\n        <h3 style={{ marginRight: 32, verticalAlign: 'middle' }}>\n          We'll build this\n        </h3>\n        <img\n          src=\"https://i.imgur.com/zDDdy0P.jpg\"\n          alt=\"Example\"\n          width=\"500\"\n        ></img>\n      </div>\n    </Slide>\n  );\n}\n","import { useRef, useEffect } from 'react';\nimport * as lib from '../lib';\nimport './viz.css';\n\ninterface Prop {\n  seed: number;\n  smoothness: number;\n  turbulence: number;\n  lineCount: number;\n  stepSize: number;\n  lineWidth: number;\n  showAnchors: boolean;\n}\n\nconst positions = Array(1000)\n  .fill(false)\n  .map(() => [lib.randomFloat(0, 800), lib.randomFloat(0, 800)]);\n\nexport function FlowFieldViz(props: Prop) {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (!canvas.current) {\n      return;\n    }\n\n    const [width, height] = [800, 800];\n\n    const context = canvas.current.getContext('2d')!;\n\n    context.fillStyle = '#eee';\n    context.fillRect(0, 0, width, height);\n\n    context.lineWidth = props.lineWidth;\n    context.lineCap = 'round';\n    context.strokeStyle = lib.hsla([0, 0, 0]);\n    context.fillStyle = lib.hsla([0, 50, 50]);\n\n    for (let i = 0; i < props.lineCount; i++) {\n      let distance = 0;\n      let [x, y] = positions[i];\n\n      if (i === 0) {\n        x = width / 2;\n        y = height / 2;\n      }\n\n      context.beginPath();\n      context.moveTo(x, y);\n      while (\n        lib.isInsideRectangle([x, y], [0, 0, width, height]) &&\n        distance < 1000\n      ) {\n        const n = lib.Noise.simplex(\n          x / props.smoothness,\n          y / props.smoothness,\n          props.seed\n        );\n\n        if (props.showAnchors) {\n          context.fillRect(x - 10, y - 10, 20, 20);\n        }\n\n        x += Math.sin(n * props.turbulence) * props.stepSize;\n        y += Math.cos(n * props.turbulence) * props.stepSize;\n\n        distance += props.stepSize;\n        context.lineTo(x, y);\n      }\n      context.stroke();\n    }\n  });\n\n  return <canvas ref={canvas} width=\"800px\" height=\"800px\"></canvas>;\n}\n","import { useState } from 'react';\nimport { CodePane, Slide } from 'spectacle';\nimport { FlowFieldViz } from '../viz/FlowFieldViz';\nimport './slides.css';\n\nexport function FlowField() {\n  const [seed, setSeed] = useState(0);\n  const [smoothness, setSmoothness] = useState(430);\n  const [turbulance, setTurbulance] = useState(4.6);\n  const [lineCount, setLineCount] = useState(1);\n  const [stepSize, setStepSize] = useState(160);\n  const [lineWidth, setLineWidth] = useState(7);\n  const [showAnchors, setShowAnchors] = useState(true);\n\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center column mid\">\n        <CodePane\n          language=\"typescript\"\n          showLineNumbers={false}\n          highlightRanges={[2, [3, 4], 8, [9, 13], [15, 17]]}\n        >\n          {`\n\n            context.lineWidth = ${lineWidth};\n            for (let i = 0; i < ${lineCount}; i++) {\n              let x = randomFloat(0, width);\n              let y = randomFloat(0, height);\n              \n              context.beginPath();\n              context.moveTo(x, y);\n              while (isInBounds(x, y)) {\n                const n = noise(\n                  x / ${smoothness},\n                  y / ${smoothness},\n                  ${seed}\n                );\n        \n                x += Math.cos(n * ${turbulance}) * ${stepSize};\n                y += Math.sin(n * ${turbulance}) * ${stepSize};\n                context.lineTo(x, y);\n              }\n              context.stroke();\n            }\n            `}\n        </CodePane>\n        <div className=\"center stack\">\n          <FlowFieldViz\n            seed={seed}\n            smoothness={smoothness}\n            turbulence={turbulance}\n            lineCount={lineCount}\n            stepSize={stepSize}\n            lineWidth={lineWidth}\n            showAnchors={showAnchors}\n          />\n          <div className=\"center stack form\">\n            <div>\n              <button onClick={() => setSeed(Math.floor(Math.random() * 100))}>\n                New Seed\n              </button>\n              <span className=\"highlight\">Seed: {seed}</span>\n            </div>\n            <div>\n              <span>Smoothness</span>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"800\"\n                step=\"10\"\n                value={smoothness}\n                onChange={(e) => setSmoothness(parseInt(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Turbulence</span>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"6\"\n                step=\"0.2\"\n                value={turbulance}\n                onChange={(e) => setTurbulance(parseFloat(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Lines</span>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"500\"\n                step=\"1\"\n                value={lineCount}\n                onChange={(e) => setLineCount(parseInt(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Line width</span>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                step=\"1\"\n                value={lineWidth}\n                onChange={(e) => setLineWidth(parseInt(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Step size</span>\n              <input\n                type=\"range\"\n                min=\"10\"\n                max=\"200\"\n                step=\"10\"\n                value={stepSize}\n                onChange={(e) => setStepSize(parseInt(e.target.value))}\n              />\n            </div>\n\n            <div>\n              <span>Show anchors</span>\n              <input\n                type=\"checkbox\"\n                checked={showAnchors}\n                onChange={(e) => setShowAnchors(e.target.checked)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { useRef, useEffect } from 'react';\nimport * as lib from '../lib';\nimport './viz.css';\n\ninterface Prop {\n  seed: number;\n  lineCount: number;\n  stepSize: number;\n  enableCollisionDetection: boolean;\n}\n\nconst positions = Array(2000)\n  .fill(false)\n  .map(() => [lib.randomFloat(0, 1200), lib.randomFloat(0, 1200)]);\n\nexport function ForcesViz(props: Prop) {\n  const canvas = useRef<HTMLCanvasElement>(null);\n\n  const smoothness = 1000;\n  const turbulence = 4;\n  const quadCount = 100;\n\n  useEffect(() => {\n    if (!canvas.current) {\n      return;\n    }\n\n    const [width, height] = [1200, 1200];\n\n    const context = canvas.current.getContext('2d')!;\n    const quads = lib.buildQuadMap(quadCount);\n    const r = 5;\n\n    context.fillStyle = '#eee';\n    context.fillRect(0, 0, width, height);\n\n    context.fillStyle = '#000';\n\n    for (let i = 0; i < props.lineCount; i++) {\n      let [x, y] = positions[i];\n\n      if (i === 0) {\n        x = width / 2;\n        y = height / 2;\n      }\n\n      const line: lib.Circle[] = [];\n\n      while (\n        lib.isInsideRectangle([x, y], [100, 100, width - 100, height - 100]) &&\n        (lib.randomFloat() > 0.01 || props.lineCount === 1)\n      ) {\n        const n = lib.Noise.simplex(x / smoothness, y / smoothness, props.seed);\n\n        const particle: lib.Circle = {\n          centerX: x,\n          centerY: y,\n          radius: r,\n        };\n\n        const quadIndex = lib.getQuadrantIndex(\n          [particle.centerX, particle.centerY],\n          width,\n          height,\n          quadCount\n        );\n\n        const quad = quads[quadIndex];\n\n        if (\n          props.enableCollisionDetection &&\n          lib.isInsideAnyParticle(particle, quad, 10)\n        ) {\n          break;\n        }\n\n        context.beginPath();\n        context.arc(x, y, r, 0, 2 * Math.PI);\n        context.fill();\n        line.push(particle);\n\n        x += Math.cos(n * turbulence) * props.stepSize * Math.sqrt(r);\n        y += Math.sin(n * turbulence) * props.stepSize * Math.sqrt(r);\n      }\n\n      for (let cirlce of line) {\n        const index = lib.getQuadrantIndex([x, y], width, height, quadCount);\n        quads[index]?.push(cirlce);\n      }\n    }\n  });\n\n  return <canvas ref={canvas} width=\"1200px\" height=\"1200px\"></canvas>;\n}\n","import { useRef, useEffect } from 'react';\nimport * as lib from '../lib';\nimport './viz.css';\n\nexport interface Colors {\n  background: lib.HSLA;\n  palette: lib.HSLA[];\n}\n\nexport enum ColorMethod {\n  FROM_PALETTE = 'FROM_PALETTE',\n  BY_REGION = 'BY_REGION',\n}\n\ninterface Prop {\n  colors: Colors;\n  seed: number;\n  colorMethod: ColorMethod;\n}\n\nexport function ForcesColorViz(props: Prop) {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const quadCount = 100;\n\n  useEffect(() => {\n    if (!canvas.current) {\n      return;\n    }\n    const turbulence = lib.randomFloat(0.5, 3.4);\n    const smoothness = lib.randomInt(400, 1e3);\n    const distance = lib.fromPalette([7, 13]);\n\n    const [width, height] = [1600, 1600];\n\n    const regions: lib.Shape[] = [\n      lib.createShape([0, 0], width / 2, 10),\n      lib.createShape([width, 0], width / 2, 10),\n      lib.createShape([0, height], width / 2, 10),\n      lib.createShape([width, height], width / 2, 10),\n    ];\n\n    const regionColors: lib.HSLA[] = [\n      props.colors.palette[0],\n      props.colors.palette[1],\n      props.colors.palette[2],\n      props.colors.palette[3],\n    ];\n\n    const context = canvas.current.getContext('2d')!;\n\n    const quads = lib.buildQuadMap(quadCount);\n\n    context.fillStyle = lib.hsla(props.colors.background);\n    context.fillRect(0, 0, width, height);\n\n    for (let i = 0; i < 1400; i++) {\n      let x = lib.randomFloat(0, width);\n      let y = lib.randomFloat(0, height);\n\n      const line: lib.Circle[] = [];\n\n      const r = 5;\n\n      if (props.colorMethod === ColorMethod.FROM_PALETTE) {\n        context.fillStyle = lib.hsla(lib.fromPalette(props.colors.palette));\n      } else if (props.colorMethod === ColorMethod.BY_REGION) {\n        const region = regions.findIndex((region) =>\n          lib.isInsidePolygon([x, y], region)\n        );\n\n        if (region === -1) {\n          context.fillStyle = lib.hsla(props.colors.palette[5]);\n        } else {\n          context.fillStyle = lib.hsla(regionColors[region]);\n        }\n      }\n\n      while (\n        lib.isInsideRectangle([x, y], [100, 100, width - 100, height - 100]) &&\n        lib.randomFloat() > 0.01\n      ) {\n        const n = lib.Noise.simplex(x / smoothness, y / smoothness, props.seed);\n\n        const particle: lib.Circle = {\n          centerX: x,\n          centerY: y,\n          radius: r,\n        };\n\n        const quadIndex = lib.getQuadrantIndex(\n          [particle.centerX, particle.centerY],\n          width,\n          height,\n          quadCount\n        );\n\n        const quad = quads[quadIndex];\n\n        if (lib.isInsideAnyParticle(particle, quad, 10)) {\n          break;\n        }\n\n        context.beginPath();\n        context.arc(x, y, r, 0, 2 * Math.PI);\n        context.fill();\n        line.push(particle);\n\n        x += Math.cos(n * turbulence) * distance;\n        y += Math.sin(n * turbulence) * distance;\n      }\n\n      for (let cirlce of line) {\n        const index = lib.getQuadrantIndex([x, y], width, height, quadCount);\n        quads[index]?.push(cirlce);\n      }\n    }\n  });\n\n  return <canvas ref={canvas} width=\"1600px\" height=\"1600px\"></canvas>;\n}\n","import { useState } from 'react';\nimport { CodePane, Slide } from 'spectacle';\nimport { ForcesViz } from '../viz/ForcesViz';\nimport './slides.css';\n\nexport function Forces() {\n  const [seed, setSeed] = useState(0);\n  const [lineCount, setLineCount] = useState(1);\n  const [stepSize, setStepSize] = useState(21);\n  const [enableCollisionDetection, setEnableCollisionDetection] =\n    useState(false);\n\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center column mid\">\n        <CodePane\n          language=\"typescript\"\n          showLineNumbers={false}\n          highlightRanges={[2, 4, 5, 6, 12, 13, 17, [7, 10]]}\n        >\n          {`\n          const previouslyDrawnCircles: lib.Cirlce[] = [];\n          for (let i = 0; i < ${lineCount}; i++) {\n            // set up x and y coordinates\n            const line: lib.Circle[] = [];\n            while ( isInsideCanvas ) {\n              const circle: lib.Circle = { x, y, radius };\n              if (\n                collisionDetection &&\n                lib.collides(circle, previouslyDrawnLines)\n              ) { break; }\n              \n              drawCircle(circle);\n              line.push(circle);\n              x += Math.cos(n * 4.4) * ${stepSize} * Math.sqrt(r);\n              y += Math.sin(n * 4.4) * ${stepSize} * Math.sqrt(r);\n            }\n            previouslyDrawnLines.push(...line);\n          }\n            `}\n        </CodePane>\n        <div className=\"center stack\">\n          <ForcesViz\n            seed={seed}\n            lineCount={lineCount}\n            stepSize={stepSize}\n            enableCollisionDetection={enableCollisionDetection}\n          />\n          <div className=\"center stack form\">\n            <div>\n              <button onClick={() => setSeed(Math.floor(Math.random() * 100))}>\n                New Seed\n              </button>\n              <span className=\"highlight\">Seed: {seed}</span>\n            </div>\n            <div>\n              <span>Lines</span>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"2000\"\n                step=\"1\"\n                value={lineCount}\n                onChange={(e) => setLineCount(parseInt(e.target.value))}\n              />\n            </div>\n            <div>\n              <span>Step size</span>\n              <input\n                type=\"range\"\n                min=\"2\"\n                max=\"50\"\n                step=\"1\"\n                value={stepSize}\n                onChange={(e) => setStepSize(parseInt(e.target.value))}\n              />\n            </div>\n\n            <div>\n              <span>Check collisions</span>\n              <input\n                type=\"checkbox\"\n                checked={enableCollisionDetection}\n                onChange={(e) => setEnableCollisionDetection(e.target.checked)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { useState } from 'react';\nimport { CodePane, Slide } from 'spectacle';\nimport { ColorMethod, ForcesColorViz } from '../viz/ForcesColorViz';\nimport { Colors } from '../viz/ForcesColorViz';\nimport './slides.css';\nimport * as lib from '../lib';\n\nexport function ForcesColor() {\n  const white: Colors = {\n    background: [48, 20, 9],\n    palette: [[0, 100, 100]],\n  };\n\n  const autumn: Colors = {\n    background: [48, 20, 9],\n    palette: [\n      [0, 100, 98],\n      [75, 100, 81],\n      [34, 61, 91],\n      [28, 82, 56],\n      [0, 8, 21],\n      [0, 44, 44],\n    ],\n  };\n\n  const night: Colors = {\n    background: [120, 25, 5],\n    palette: [\n      [40, 52, 88],\n      [48, 24, 46],\n      [0, 2, 38],\n      [214, 29, 41],\n      [100, 70, 81],\n      [0, 1, 81],\n    ],\n  };\n\n  const day: Colors = {\n    background: [180, 2, 88],\n    palette: [\n      [0, 100, 100],\n      [44, 100, 94],\n      [192, 100, 94],\n      [193, 27, 76],\n      [0, 8, 21],\n      [0, 44, 44],\n    ],\n  };\n\n  const [colors, setColors] = useState<Colors>(white);\n  const [seed, setSeed] = useState(100);\n  const [colorMethod, setColorMethod] = useState<ColorMethod>(\n    ColorMethod.FROM_PALETTE\n  );\n\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center column mid\">\n        <CodePane\n          language=\"typescript\"\n          showLineNumbers={false}\n          highlightRanges={[\n            [1, 4],\n            [16, 18],\n            [5, 9],\n            [12, 14],\n            [19, 21],\n          ]}\n        >\n          {`\nconst colors = {\n  background: 'hsla(${colors.background.join(',')})',\n  palette: [${colors.palette.slice(0, 2).map((c) => `'hsla(${c})'`)}, ...],\n};\nconst regions: lib.Shape[] = [\n  canvas.topLeft,\n  canvas.topRight,\n  canvas.bottomLeft,\n  canvas.bottomRight,\n];\n\nconst coloredRegions = colorRegions(\n  regions, colors.palette\n);\n\nfor (let i = 0; i < lines.length; i++) {\n  if (colorByLine) {\n    context.fillStyle = lib.fromPalette(colors.palette);\n  } else if (colorByRegion) {\n    const region = findRegion(x,y, regions);\n    context.fillStyle = coloredRegions.color;\n  }\n}\n            `}\n        </CodePane>\n        <div className=\"center stack\">\n          <ForcesColorViz\n            colors={colors}\n            seed={seed}\n            colorMethod={colorMethod}\n          />\n          <div className=\"center stack form\">\n            <button\n              onClick={() => {\n                setSeed(lib.randomInt(0, 100));\n                setColors(lib.fromPalette([day, night, autumn]));\n                setColorMethod(\n                  lib.fromPalette([\n                    ColorMethod.FROM_PALETTE,\n                    ColorMethod.BY_REGION,\n                  ])\n                );\n              }}\n            >\n              Make Art\n            </button>\n\n            <div className=\"center column\">\n              <span>Palette</span>\n              <select\n                onChange={(e) => {\n                  const map: Record<string, Colors> = {\n                    white,\n                    autumn,\n                    night,\n                    day,\n                  };\n\n                  setColors(map[e.target.value]);\n                }}\n              >\n                <option value=\"whitwe\">White</option>\n                <option value=\"autumn\">Autumn</option>\n                <option value=\"night\">Night</option>\n                <option value=\"day\">Day</option>\n              </select>\n            </div>\n\n            <div className=\"center column\">\n              Method\n              <select\n                onChange={(e) => {\n                  setColorMethod(e.target.value as ColorMethod);\n                }}\n              >\n                <option value={ColorMethod.FROM_PALETTE}>By Line</option>\n                <option value={ColorMethod.BY_REGION}>By Region</option>\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\n\nexport function Variations() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center mid\">\n        <h2>Variation!</h2>\n      </div>\n    </Slide>\n  );\n}\n","import { Slide } from 'spectacle';\n\nexport function ClosingNotes() {\n  return (\n    <Slide backgroundColor=\"#fff\">\n      <div className=\"center mid\">\n        <h2>Closing Notes</h2>\n      </div>\n    </Slide>\n  );\n}\n","import { Deck } from 'spectacle';\nimport './App.css';\nimport * as slides from './slides';\n\nfunction App() {\n  const theme = {\n    colors: {\n      primary: '#111',\n      secondary: '#111',\n      background: '#fff',\n    },\n    background: '#fff',\n    backgroundColor: '#fff',\n    fontSizes: {\n      header: '64px',\n      paragraph: '28px',\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <Deck theme={theme} transition={undefined}>\n        <slides.Hello />\n        <slides.WhoAmI />\n        <slides.WhatIsGenerativeArt />\n        <slides.Frameworks />\n        <slides.PutAPixelOnTheScreen />\n        <slides.WhyGenerativeArt />\n        <slides.PracticalExample />\n        <slides.WhatWeWillBuild />\n        <slides.NoiseFunction />\n        <slides.NoiseLineFunction />\n        <slides.FlowField />\n        <slides.Forces />\n        <slides.ForcesColor />\n        <slides.Variations />\n        <slides.Examples />\n        <slides.ClosingNotes />\n      </Deck>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}